module Shikimori
  module API
    class REST
      type request_method = :delete | :get | :post | :put
      type request = Net::HTTP::Delete | Net::HTTP::Get | Net::HTTP::Post | Net::HTTP::Put
      type body = Hash[_ToS, Object] | nil

      @app_name: String | nil
      @access_token: String | nil
      @refresh_token: String | nil
      @proxy_host: String | :ENV | nil
      @proxy_port: Integer | nil
      @proxy_user: String | nil
      @proxy_password: String | nil

      def initialize: (?app_name: String | nil, ?access_token: String | nil, ?refresh_token: String | nil, **untyped) -> void

      def get: (::URI::Generic, **untyped) -> untyped
      def post: (::URI::Generic, Hash[_ToS, untyped] data, **untyped) -> untyped
      def put: (::URI::Generic, Hash[_ToS, untyped] data, **untyped) -> untyped
      def delete: (::URI::Generic, **untyped) -> bool

      private

      def request: (request_method, ::URI::Generic, ?body, **untyped) -> [Net::HTTPResponse, (::Hash[_ToS, Object] | nil | Array[untyped])]
      def build_request: (request_method, ::URI::Generic, **untyped) -> request
      def start_request: (::URI::Generic, request, ?body, **untyped) -> Net::HTTPResponse
      def parse_response: (Net::HTTPResponse response) -> (::Hash[_ToS, untyped] | Array[untyped] | nil)
      def json_parse_response_errors: (String) -> (String | nil)
      def json_parse_response_body: (String) -> (::Hash[_ToS, untyped] | Array[untyped] | nil)
      def headers_from: (Hash[untyped, untyped]) -> Hash[String, String]
      def query_params_from: (::URI::Generic, Hash[untyped, untyped]) -> untyped
    end
  end
end
